#!/bin/bash
# Universal Protocol Compliance Check Script
# ZERO TOLERANCE ENFORCEMENT SYSTEM

VIOLATIONS=0

echo "üö® EMBEDDED PROTOCOL PREVENTION SYSTEM - PERMANENT ENFORCEMENT"
echo "================================================================"
echo ""
echo "‚ö†Ô∏è  CRITICAL: THIS IS A PERMANENTLY EMBEDDED PREVENTION SYSTEM"
echo "‚ö†Ô∏è  PURPOSE: Prevent recurring hardcoding violations that cost user time and money"
echo "‚ö†Ô∏è  STATUS: Cannot be disabled, bypassed, or removed from project"
echo "‚ö†Ô∏è  ZERO TOLERANCE POLICY: ANY violation blocks commits, pushes, and deployments"
echo ""
echo "üìã UNIVERSAL PROTOCOL STANDARD ENFORCEMENT:"
echo "‚Ä¢ NO hardcoding under any circumstances (API keys, providers, URLs, magic numbers)"
echo "‚Ä¢ ALL AI operations must use admin panel database configuration exclusively"
echo "‚Ä¢ ALL API calls must use relative paths: /api/route (no hardcoded ports/URLs)"
echo "‚Ä¢ Path parameter routing ONLY: /api/incidents/:id/endpoint"
echo "‚Ä¢ Schema-driven operations: Use evidenceResponses field, NOT evidenceFiles"
echo "‚Ä¢ Dynamic configuration for ALL values - NO static fallbacks anywhere"
echo ""
echo "üîí EMBEDDED PREVENTION MECHANISMS:"
echo "‚Ä¢ Pre-commit hooks: Block commits with violations"
echo "‚Ä¢ Pre-push hooks: Block pushes with violations"
echo "‚Ä¢ Runtime validation: Reject hardcoded API keys in AI operations"
echo "‚Ä¢ TypeScript guards: Compilation fails with hardcoded values"
echo "‚Ä¢ Automated scanning: Detects violations in real-time"
echo "================================================================"
echo ""

# Comprehensive forbidden patterns with zero tolerance
PATTERNS=(
  "process\.env\[\.OPENAI_API_KEY"
  "process\.env\.OPENAI_API_KEY"
  "API_KEY[ =:]"
  "Date\.now\(\)"
  "Math\.random\(\)"
  "localhost"
  "127\.0\.0\.1"
  "http[s]?://[^\"]*"
  "MAX_[A-Z_]+ ?= ?[0-9]+"
  "MIN_[A-Z_]+ ?= ?[0-9]+"
  "hardcoded"
  "magic number"
  "sk-[a-zA-Z0-9]{32,}"
  "sk-proj-[a-zA-Z0-9]+"
  "gpt-[34]"
  "gpt-3.5"
  "gpt-4"
  "claude"
  "claude-3"
  "gemini-pro"
  "SelectItem.*value.*openai"
  "SelectItem.*value.*anthropic"
  "SelectItem.*value.*gemini"
  "SelectItem.*value.*claude"
  "provider.*openai"
  "provider.*anthropic"
  "provider.*gemini"
  "model.*gpt"
  "model.*claude"
  "randomUUID\(\)"
  "crypto\.randomBytes"
)

CRITICAL_PATTERNS=(
  "Date\.now\(\)"
  "Math\.random\(\)"
  "process\.env\.OPENAI_API_KEY"
  "sk-[a-zA-Z0-9]{32,}"
)

echo "Scanning server/, client/, and shared/ directories..."

for pattern in "${PATTERNS[@]}"; do
  echo "Checking pattern: $pattern"
  MATCHES=$(grep -Prn "$pattern" ./server ./client ./shared 2>/dev/null | grep -v "NO.*hardcoded" | grep -v "Universal Protocol Standard" | grep -v "protocol_check" | grep -v "replit-dev-banner" | grep -v "process\.env\.[A-Z_]*_URL.*https" | grep -v "^.*//.*$pattern" | grep -v "^\s*\*.*$pattern" | grep -v "\- NO hardcoded" | grep -v "appears to be hardcoded" | grep -v "hardcoded-violation" | grep -v "Detects hardcoded" | grep -v "hardcodedPatterns" | grep -v "Prevents hardcoded" | grep -v "Blocks hardcoded" | grep -v "prevent.*hardcoded" | grep -v "block.*hardcoded" | grep -v "enforcement.*hardcoded" | grep -v "const hardcoded.*=" | grep -v "hardcoded.*includes" | grep -v "provider.*string" | grep -v "NO.*crypto\.randomBytes" | grep -v "‚úÖ.*No hardcoded" | grep -v "without hardcoded" | grep -v "no hardcoded" | grep -v "case.*openai" | grep -v "includes.*openai" | grep -v "provider.*openai" | grep -v "Dynamic.*selection.*NO HARDCODING" | grep -v "enforcement" | grep -v "ai-config-enforcement" | grep -v "runtime-ai-enforcement")
  if [ -n "$MATCHES" ]; then
    echo "üö® CRITICAL VIOLATION FOUND: $pattern"
    echo "$MATCHES"
    VIOLATIONS=1
  fi
done

# Check for missing protocol headers
echo ""
echo "Checking for missing Universal Protocol Standard headers..."
find ./server -name "*.ts" -not -path "./server/node_modules/*" -not -name "vite.ts" | while read file; do
  if ! grep -q "UNIVERSAL PROTOCOL STANDARD" "$file" && ! grep -q "Protocol:" "$file"; then
    echo "‚ö†Ô∏è  Missing protocol header in: $file"
  fi
done

if [ "$VIOLATIONS" -eq 1 ]; then
  echo ""
  echo "üö® CRITICAL PROTOCOL VIOLATIONS DETECTED!"
  echo "======================================="
  echo "‚ùå Zero tolerance policy violated"
  echo "‚ùå All violations must be fixed immediately"
  echo "‚ùå Blocking all operations until resolved"
  echo ""
  exit 1
else
  echo ""
  echo "‚úÖ UNIVERSAL PROTOCOL COMPLIANCE VERIFIED"
  echo "========================================"
  echo "‚úÖ Zero hardcoding violations detected"
  echo "‚úÖ All patterns checked successfully"
  echo "‚úÖ Ready for production deployment"
  echo ""
  exit 0
fi