Prompt A — Decision helper (matrix + mapping)
Create src/lib/rca/decision.ts
export type Severity = 'Low'|'Medium'|'High';
export type Recurrence = 'Low'|'Medium'|'High';
export type RcaRec = { level: 1|2|3|4|5; label: string; method: string; timebox: string };

const MATRIX: Record<Severity, Record<Recurrence, RcaRec>> = {
  Low: {
    Low:    { level:1, label:'Level 1 RCA', method:'Quick check / mini 5 Whys', timebox:'≤24h' },
    Medium: { level:2, label:'Level 2 RCA', method:'5 Whys',                      timebox:'24–48h' },
    High:   { level:3, label:'Level 3 RCA', method:'Fishbone (+ 5 Whys)',         timebox:'≤7 days' },
  },
  Medium: {
    Low:    { level:2, label:'Level 2 RCA', method:'5 Whys',                      timebox:'24–48h' },
    Medium: { level:3, label:'Level 3 RCA', method:'Fishbone (+ 5 Whys)',         timebox:'≤7 days' },
    High:   { level:4, label:'Level 4 RCA', method:'Logic Tree (+ Fishbone)',     timebox:'1–3 weeks' },
  },
  High: {
    Low:    { level:3, label:'Level 3 RCA', method:'Fishbone (+ 5 Whys)',         timebox:'≤7 days' },
    Medium: { level:4, label:'Level 4 RCA', method:'Logic Tree (+ Fishbone)',     timebox:'1–3 weeks' },
    High:   { level:5, label:'Level 5 RCA', method:'Full toolkit (Logic Tree + FMEA + CAPA)', timebox:'Programmatic' },
  },
};

export function mapFrequencyToRecurrence(freq: string): Recurrence {
  const f = (freq || '').toLowerCase();
  if (f.includes('first')) return 'Low';
  if (f.includes('intermittent')) return 'Medium';
  if (f.includes('recurr') || f.includes('multiple')) return 'High';
  return 'Low';
}

export function getRcaRecommendation(severity: Severity, recurrence: Recurrence): RcaRec {
  return MATRIX[severity][recurrence];
}
Prompt B — DB schema (pick Prisma if present; else SQL)
If Prisma is in the repo (package.json has "prisma"):
Update schema.prisma:
enum RcaSeverity { Low Medium High }
enum RcaRecurrence { Low Medium High }

model RcaTriage {
  id          String        @id @default(cuid())
  incidentId  String        @unique
  severity    RcaSeverity
  recurrence  RcaRecurrence
  level       Int
  label       String
  method      String
  timebox     String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // adjust relation if you have Incident model
  // incident    Incident      @relation(fields: [incidentId], references: [id])
}
Run: npx prisma migrate dev -n add_rca_triage
If Prisma is NOT present, create a SQL migration and run it:
CREATE TABLE IF NOT EXISTS rca_triage (
  id            uuid PRIMARY KEY DEFAULT gen_random_uuid(),
  incident_id   varchar(64) NOT NULL UNIQUE,
  severity      varchar(10) NOT NULL CHECK (severity IN ('Low','Medium','High')),
  recurrence    varchar(10) NOT NULL CHECK (recurrence IN ('Low','Medium','High')),
  level         smallint NOT NULL CHECK (level BETWEEN 1 AND 5),
  label         text NOT NULL,
  method        text NOT NULL,
  timebox       text NOT NULL,
  created_at    timestamptz NOT NULL DEFAULT now(),
  updated_at    timestamptz NOT NULL DEFAULT now()
);
CREATE UNIQUE INDEX IF NOT EXISTS ux_rca_triage_incident ON rca_triage (incident_id);
(Use your project’s migration routine or run via your DB client.)
Prompt C — API endpoints (upsert by incidentId)
POST /api/incidents/:id/triage
// body: { severity: 'Low'|'Medium'|'High', recurrence: 'Low'|'Medium'|'High' }
import { getRcaRecommendation } from '@/lib/rca/decision';
// import prisma or your db client

export default async function handler(req, res) {
  const { id } = req.query;
  const { severity, recurrence } = req.body;
  const rec = getRcaRecommendation(severity, recurrence);

  // Prisma example; replace with your DB client if needed
  const saved = await prisma.rcaTriage.upsert({
    where: { incidentId: String(id) },
    update: { severity, recurrence, level: rec.level, label: rec.label, method: rec.method, timebox: rec.timebox },
    create: { incidentId: String(id), severity, recurrence, level: rec.level, label: rec.label, method: rec.method, timebox: rec.timebox }
  });

  res.json({ ...rec, saved: true });
}
GET /api/incidents/:id/triage
export default async function handler(req, res) {
  const { id } = req.query;
  const row = await prisma.rcaTriage.findUnique({ where: { incidentId: String(id) } });
  if (!row) return res.status(404).json({ error: 'not_found' });
  res.json(row);
}
Prompt D — New page /incidents/:id/rca-triage
Create the page.
Fetch the incident by id. Derive:
import { getRcaRecommendation, mapFrequencyToRecurrence, Severity } from '@/lib/rca/decision';
const severity = (incident.issueSeverity as Severity) || 'Medium';
const recurrence = mapFrequencyToRecurrence(incident.issueFrequency);
const rec = getRcaRecommendation(severity, recurrence);
Render a simple card:
Badge: rec.label
“Suggested method: {rec.method}”
“Timebox: {rec.timebox}”
Buttons:
Start Recommended → POST /api/incidents/:id/triage with {severity, recurrence}; store response.
Escalate → (for now, just toast “Escalation allowed; routing in next step”).
Prompt E — Navigation
On the Evidence Collection step’s “Continue” button, route to:
/incidents/:id/rca-triage
Prompt F — Acceptance checks
Given Issue Severity = “Medium” and Issue Frequency = “First Occurrence”, page shows:
Level 2 RCA, 5 Whys, Timebox 24–48h.
POST /api/incidents/:id/triage upserts to DB.
Refreshing /incidents/:id/rca-triage shows the saved triage via GET.