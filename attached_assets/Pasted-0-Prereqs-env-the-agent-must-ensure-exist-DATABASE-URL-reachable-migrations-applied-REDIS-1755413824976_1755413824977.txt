0) Prereqs (env the agent must ensure exist)
•	DATABASE_URL reachable; migrations applied.
•	REDIS_URL reachable (BullMQ worker running in same repl or background).
•	SLA_PROFILE_STANDARD_HOURS=24 (or other, but test expects this value).
•	Mail envs set (or stub) for preview/send: SMTP_HOST, SMTP_PORT, SMTP_USER, SMTP_PASS, MAIL_FROM.
•	Roles in RBAC: Reporter,Analyst,Approver,Admin.
 
1) Paste this whole script into the repl shell
#!/usr/bin/env bash
set -euo pipefail

# === CONFIG (adjust as needed) ===
BASE="${BASE:-http://localhost:5000}"

# Auth OPTION A: dev headers (uncomment to use)
DEV_ANALYST_HEADERS=(-H "X-User: analyst@acme.test" -H "X-Role: Analyst")
DEV_REPORTER_HEADERS=(-H "X-User: reporter@acme.test" -H "X-Role: Reporter")
DEV_APPROVER_HEADERS=(-H "X-User: approver@acme.test" -H "X-Role: Approver")

# Auth OPTION B: JWTs (uncomment and set ANALYST_JWT etc)
# DEV_ANALYST_HEADERS=(-H "Authorization: Bearer $ANALYST_JWT")
# DEV_REPORTER_HEADERS=(-H "Authorization: Bearer $REPORTER_JWT")
# DEV_APPROVER_HEADERS=(-H "Authorization: Bearer $APPROVER_JWT")

JQ=${JQ:-jq} # ensure jq installed

say() { printf "\n\033[1m%s\033[0m\n" "$*"; }
pass() { printf "✅ %s\n" "$*"; }
fail() { printf "❌ %s\n" "$*" ; exit 1; }

# Helper to extract JSON field safely
get() { echo "$1" | $JQ -r "$2"; }

# Sanity: server up
say "0) Health check"
curl -sSf "$BASE/health" >/dev/null && pass "server responds to /health"

# -------------------------------------------------------------------
# EQUIPMENT (verifies refactor away from hardcoded lists)
# -------------------------------------------------------------------
say "1) Equipment endpoints return DB-backed values"
EQ=$(curl -sSf "$BASE/api/equipment/groups")
echo "$EQ" | $JQ -e 'type=="array"' >/dev/null || fail "equipment groups must be an array"
echo "$EQ" | $JQ -e 'map(type) | all(.=="string")' >/dev/null || fail "groups must be strings"
pass "equipment groups OK: $(echo "$EQ" | $JQ -c '.[0:5]')"

# -------------------------------------------------------------------
# INCIDENT CREATION (Step-1)
# -------------------------------------------------------------------
say "2) Create an incident (Step-1)"
INC_BODY=$(cat <<'JSON'
{
  "title":"Centrifugal pump overheating",
  "description":"Bearing temperature spikes during startup",
  "priority":"High",
  "location":"Plant A",
  "equipmentGroup":"Rotating",
  "reportedBy":"reporter@acme.test",
  "regulatoryRequired": false
}
JSON
)
INC_RES=$(curl -sSf -X POST "$BASE/api/incidents" -H "Content-Type: application/json" "${DEV_REPORTER_HEADERS[@]}" -d "$INC_BODY")
INC_ID=$(get "$INC_RES" '.id')
test "$INC_ID" != "null" && pass "incident created id=$INC_ID" || fail "incident id missing"

# List incidents must include the new one
LIST=$(curl -sSf "$BASE/api/incidents" "${DEV_ANALYST_HEADERS[@]}")
echo "$LIST" | $JQ -e --arg id "$INC_ID" 'map(.id) | index($id) != null' >/dev/null || fail "created incident not listed"
pass "incident appears in GET /api/incidents"

# -------------------------------------------------------------------
# SYMPTOMS append from Step-8 UI
# -------------------------------------------------------------------
say "3) Append observed symptoms via API used by Step-8"
SYM='{"text":"High vibration detected near bearing housing"}'
curl -sSf -X POST "$BASE/api/incidents/$INC_ID/symptoms" -H "Content-Type: application/json" "${DEV_ANALYST_HEADERS[@]}" -d "$SYM" >/dev/null
INC_SHOW=$(curl -sSf "$BASE/api/incidents/$INC_ID" "${DEV_ANALYST_HEADERS[@]}")
echo "$INC_SHOW" | $JQ -e '.symptoms | any(.text|test("vibration";"i"))' >/dev/null || fail "symptom not attached"
pass "symptom recorded on incident"

# -------------------------------------------------------------------
# EVIDENCE (pointer mode – no bytes stored)
# -------------------------------------------------------------------
say "4) Evidence upload (pointer mode: stream+hash, no disk persistence)"
EVID_POINTER=$(cat <<'JSON'
{
  "mode": "pointer",
  "source": {
    "provider": "s3",
    "object": {"bucket":"org-logs","key":"2025/08/17/logs.zip","versionId":"v1"},
    "access": {"presignedGet":"https://example.com/fake-presigned","expiresAt":"2099-01-01T00:00:00Z"}
  },
  "metadata": {"mime":"application/zip","sizeBytes": 1234}
}
JSON
)
EP_RES=$(curl -sSf -X POST "$BASE/api/incidents/$INC_ID/evidence" -H "Content-Type: application/json" "${DEV_ANALYST_HEADERS[@]}" -d "$EVID_POINTER")
EP_ID=$(get "$EP_RES" '.id')
test "$EP_ID" != "null" && pass "pointer evidence recorded id=$EP_ID" || fail "pointer evidence failed"
echo "$EP_RES" | $JQ -e '.storage_mode=="pointer"' >/dev/null || fail "storage_mode must be pointer"
echo "$EP_RES" | $JQ -e '.content_hash|type=="string" and (length>=32)' >/dev/null || fail "hash missing"
pass "pointer evidence stored as metadata only"

# -------------------------------------------------------------------
# WORKFLOW INITIATION (Step-8)
# -------------------------------------------------------------------
say "5) Initiate workflow (Analyst role) – env-driven SLA"
WF_REQ=$(cat <<JSON
{
  "incidentId": "$INC_ID",
  "type": "Standard",
  "documentationLevel": "Comprehensive",
  "analysisDepth": "Comprehensive",
  "priority": "High",
  "approvalRequired": true,
  "stakeholders": [{"name":"Ops Lead","role":"Ops","email":"ops.lead@acme.test"}],
  "notify": {"email": true, "stakeholder": true, "dashboard": false, "milestones": true}
}
JSON
)
WF_RES=$(curl -sSf -X POST "$BASE/api/workflows/initiate" -H "Content-Type: application/json" "${DEV_ANALYST_HEADERS[@]}" -d "$WF_REQ")
WF_ID=$(get "$WF_RES" '.id')
DUE_AT=$(get "$WF_RES" '.due_at')

test "$WF_ID" != "null" || fail "workflow id missing"
test "$DUE_AT" != "null" || fail "due_at missing"

# SLA math: due_at should be now + SLA_PROFILE_STANDARD_HOURS (±5 minutes tolerance)
SLA_HOURS="${SLA_PROFILE_STANDARD_HOURS:-24}"
NOW_EPOCH=$(date +%s)
DUE_EPOCH=$(date -d "$DUE_AT" +%s 2>/dev/null || date -j -f "%Y-%m-%dT%H:%M:%S%z" "$DUE_AT" +%s)
DIFF_H=$(( (DUE_EPOCH - NOW_EPOCH) / 3600 ))
if [ "$DIFF_H" -ge "$((SLA_HOURS-1))" ] && [ "$DIFF_H" -le "$((SLA_HOURS+1))" ]; then
  pass "SLA due_at ≈ now + ${SLA_HOURS}h"
else
  fail "SLA due_at not computed from env; got ~${DIFF_H}h"
fi

# -------------------------------------------------------------------
# NOTIFICATION PREVIEW (no send)
# -------------------------------------------------------------------
say "6) Notification preview (dry run)"
PREV=$(curl -sSf -X POST "$BASE/api/workflows/$WF_ID/notifications/preview" "${DEV_ANALYST_HEADERS[@]}")
echo "$PREV" | $JQ -e '.recipients | any(.email=="ops.lead@acme.test")' >/dev/null || fail "preview missing stakeholder recipient"
pass "preview returns recipients without sending"

# -------------------------------------------------------------------
# RBAC NEGATIVE: Reporter must NOT initiate workflow
# -------------------------------------------------------------------
say "7) RBAC enforcement – reporter blocked from initiate"
set +e
RC=$(curl -s -o /dev/null -w "%{http_code}" -X POST "$BASE/api/workflows/initiate" -H "Content-Type: application/json" "${DEV_REPORTER_HEADERS[@]}" -d "$WF_REQ")
set -e
test "$RC" -ge 401 -a "$RC" -le 403 && pass "reporter blocked ($RC)" || fail "reporter should be forbidden (got $RC)"

# -------------------------------------------------------------------
# APPROVALS
# -------------------------------------------------------------------
say "8) Approver can approve"
APPROVE=$(curl -sSf -X POST "$BASE/api/workflows/$WF_ID/approve" -H "Content-Type: application/json" "${DEV_APPROVER_HEADERS[@]}" -d '{"decision":"approved","comment":"looks good"}')
echo "$APPROVE" | $JQ -e '.approval.status=="approved" or .status=="approved"' >/dev/null || fail "approval not reflected"
pass "approval path works"

# -------------------------------------------------------------------
# CRON / REMINDERS
# -------------------------------------------------------------------
say "9) Cron endpoint executes due reminders"
CRON_RC=$(curl -s -o /dev/null -w "%{http_code}" -X POST "$BASE/internal/cron/process-reminders" -H "X-Cron-Token: test-token")
test "$CRON_RC" -ge 200 -a "$CRON_RC" -lt 300 && pass "cron endpoint returns $CRON_RC" || fail "cron endpoint failed ($CRON_RC)"

say "ALL CHECKS PASSED"
 
2) Frontend verification (run in browser DevTools on Incident Reporting page)
// Expect an empty array => no hardcoded equipment terms in memory
Object.values(window)
 .flatMap(v => typeof v === "object" && v ? Object.values(v) : [])
 .filter(x => Array.isArray(x) && x.some(y => typeof y === "string" &&
   /Rotating|Static|Electrical|Control Valves|Instrumentation|Fire & Safety|HVAC & Utilities|Material Handling|Plant Utilities|Environmental|Utility/.test(y)))
Expected: []
 
3) Source check (run in project root)
grep -R --line-number -E "Rotating|Static|Electrical|Control Valves|Instrumentation|Fire & Safety|HVAC & Utilities|Material Handling|Plant Utilities|Environmental|Utility" client/src || true
Expected: no matches outside seed/migration scripts.
